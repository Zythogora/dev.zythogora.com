model Users {
  id       String @id
  username String @unique

  betterAuthUser BetterAuthUsers @relation(fields: [id], references: [id], onDelete: Cascade)

  reviews Reviews[]

  createdBeers Beers[] @relation("created_beers")
  updatedBeers Beers[] @relation("updated_beers")

  createdBreweries Breweries[] @relation("created_breweries")
  updatedBreweries Breweries[] @relation("updated_breweries")

  @@map("users")
  @@schema("public")
}

model Reviews {
  id                   String                @id @default(nanoid())
  slug                 String
  globalScore          Decimal               @map("global_score") @db.Decimal(3, 1)
  servingFrom          ServingFrom           @map("serving_from")
  comment              String?
  labelDesign          LabelDesign?          @map("label_design")
  haziness             Haziness?
  headRetention        HeadRetention?        @map("head_retention")
  aromasIntensity      AromasIntensity?      @map("aromas_intensity")
  flavorsIntensity     FlavorsIntensity?     @map("flavors_intensity")
  bodyStrength         BodyStrength?         @map("body_strength")
  carbonationIntensity CarbonationIntensity? @map("carbonation_intensity")
  bitterness           Bitterness?
  acidity              Acidity?
  duration             Duration?

  beerId String @map("beer_id")
  beer   Beers  @relation(fields: [beerId], references: [id])

  userId String @map("user_id")
  user   Users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([slug, userId])
  @@map("reviews")
  @@schema("public")
}
